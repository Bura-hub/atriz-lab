---
globs: backend/**/*.py
---

# Backend Reorganizado - Servidor de Gestión de Experimentos

## Arquitectura del Backend

### Core Services (Servicios Principales)
- **FastAPI Application**: API REST asíncrona para gestión de experimentos
- **Celery Workers**: Cola de tareas para operaciones de larga duración
- **Redis**: Broker de mensajes y caché
- **PostgreSQL**: Base de datos para metadatos estructurados
- **TimescaleDB/ReductStore**: Base de datos para series de tiempo (telemetría)

### Robot Integration Services (Servicios de Integración)
- **SSH Service**: Comunicación segura con robots Mercator
- **Paramiko Integration**: Transferencia de archivos y ejecución remota
- **ROS Bridge**: Foxglove Bridge (C++) para telemetría de alta frecuencia
- **Tycho Integration**: Sistema de seguimiento de trayectorias

### Security & Sandboxing (Seguridad y Aislamiento)
- **Docker Sandbox**: Contenedores efímeros para código de usuario
- **Resource Limits**: cgroups + ulimit para limitar recursos
- **SSH Key Management**: Gestión segura de credenciales
- **ROS Namespace Isolation**: Aislamiento lógico entre experimentos

## Estructura de Directorios Reorganizada

```
backend/
├── app/
│   ├── core/                    # Configuración y base de datos
│   │   ├── config.py           # Configuración de la aplicación
│   │   ├── db.py              # Conexión a base de datos
│   │   └── security.py        # Configuración de seguridad
│   ├── api/                    # API REST endpoints
│   │   ├── endpoints/         # Endpoints específicos
│   │   │   ├── experiments.py # Gestión de experimentos
│   │   │   ├── robots.py      # Gestión de robots
│   │   │   ├── telemetry.py   # Endpoints de telemetría
│   │   │   └── video.py       # Streaming de video
│   │   └── websockets/        # WebSocket handlers
│   │       ├── telemetry.py   # Telemetría en tiempo real
│   │       └── video.py       # WebRTC signaling
│   ├── services/              # Servicios de negocio
│   │   ├── experiment_service.py    # Lógica de experimentos
│   │   ├── robot_service.py         # Gestión de robots
│   │   ├── ssh_service.py          # Comunicación SSH
│   │   ├── ros_service.py          # Integración ROS
│   │   ├── tycho_service.py       # Sistema Tycho
│   │   └── sandbox_service.py     # Ejecución segura
│   ├── models/                # Modelos de base de datos
│   │   ├── experiment.py      # Modelo de experimentos
│   │   ├── robot.py          # Modelo de robots
│   │   ├── telemetry.py      # Modelo de telemetría
│   │   └── user.py           # Modelo de usuarios
│   ├── tasks/                # Tareas de Celery
│   │   ├── experiment_tasks.py    # Tareas de experimentos
│   │   ├── robot_tasks.py        # Tareas de robots
│   │   └── telemetry_tasks.py    # Tareas de telemetría
│   └── utils/                 # Utilidades
│       ├── docker_utils.py   # Utilidades Docker
│       ├── ros_utils.py      # Utilidades ROS
│       └── security_utils.py # Utilidades de seguridad
```

## Patrones de Desarrollo Específicos

### FastAPI Asíncrono
- Usar `async/await` para todas las operaciones I/O
- Implementar proper error handling con HTTPException
- Usar Pydantic para validación de datos
- Implementar rate limiting para endpoints críticos

### Integración ROS
- Usar Foxglove Bridge para telemetría de alta frecuencia
- Implementar namespaces ROS para aislamiento
- Manejar conexiones ROS de forma asíncrona
- Implementar reconexión automática

### Seguridad y Sandboxing
- Usar Docker para aislamiento de código de usuario
- Implementar límites de recursos con cgroups
- Usar SSH keys para autenticación con robots
- Implementar logging de seguridad

### Gestión de Tareas
- Usar Celery para tareas de larga duración
- Implementar Redis como broker
- Manejar fallos de tareas de forma robusta
- Implementar monitoreo de tareas