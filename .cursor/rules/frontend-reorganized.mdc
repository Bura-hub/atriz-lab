---
globs: frontend/**/*.{ts,tsx,js,jsx}
---

# Frontend Reorganizado - Cliente Web para Laboratorio Remoto

## Arquitectura del Frontend

### Core Components (Componentes Principales)
- **Experiment Dashboard**: Panel principal de gestión de experimentos
- **Code Editor**: Editor de código Python integrado
- **Robot Monitor**: Visualización de estado de robots en tiempo real
- **Telemetry Viewer**: Gráficas de telemetría en tiempo real
- **Video Stream**: Streaming de video del laboratorio (WebRTC)

### Real-time Communication (Comunicación en Tiempo Real)
- **WebSocket Client**: Conexión para telemetría y control
- **WebRTC Client**: Streaming de video de baja latencia
- **ROS Bridge Client**: Integración con datos ROS

## Estructura de Directorios Reorganizada

```
frontend/src/
├── app/                      # Next.js App Router
│   ├── experiments/         # Páginas de experimentos
│   │   ├── page.tsx        # Lista de experimentos
│   │   ├── [id]/page.tsx  # Detalle de experimento
│   │   └── create/page.tsx # Crear experimento
│   ├── robots/             # Páginas de robots
│   │   ├── page.tsx       # Lista de robots
│   │   └── [id]/page.tsx  # Detalle de robot
│   ├── dashboard/          # Dashboard principal
│   │   └── page.tsx       # Dashboard con métricas
│   └── layout.tsx         # Layout principal
├── components/             # Componentes React
│   ├── experiment/        # Componentes de experimentos
│   │   ├── ExperimentCard.tsx
│   │   ├── ExperimentForm.tsx
│   │   ├── ExperimentStatus.tsx
│   │   └── CodeEditor.tsx
│   ├── robot/            # Componentes de robots
│   │   ├── RobotCard.tsx
│   │   ├── RobotStatus.tsx
│   │   └── RobotTelemetry.tsx
│   ├── telemetry/        # Componentes de telemetría
│   │   ├── TelemetryChart.tsx
│   │   ├── TelemetryTable.tsx
│   │   └── TelemetryDashboard.tsx
│   ├── video/           # Componentes de video
│   │   ├── VideoStream.tsx
│   │   ├── VideoControls.tsx
│   │   └── VideoSettings.tsx
│   └── common/         # Componentes comunes
│       ├── LoadingSpinner.tsx
│       ├── ErrorBoundary.tsx
│       └── Layout.tsx
├── hooks/              # Custom React Hooks
│   ├── useExperiment.ts    # Hook para experimentos
│   ├── useRobot.ts        # Hook para robots
│   ├── useTelemetry.ts    # Hook para telemetría
│   ├── useWebSocket.ts    # Hook para WebSockets
│   ├── useWebRTC.ts      # Hook para WebRTC
│   └── useROS.ts         # Hook para datos ROS
├── services/           # Servicios de API
│   ├── api.ts         # Cliente API REST
│   ├── websocket.ts   # Cliente WebSocket
│   ├── webrtc.ts     # Cliente WebRTC
│   └── ros.ts        # Cliente ROS
├── utils/             # Utilidades
│   ├── ros-utils.ts  # Utilidades ROS
│   ├── video-utils.ts # Utilidades de video
│   └── telemetry-utils.ts # Utilidades de telemetría
└── types/            # Tipos TypeScript
    ├── experiment.ts # Tipos de experimentos
    ├── robot.ts     # Tipos de robots
    ├── telemetry.ts # Tipos de telemetría
    └── ros.ts      # Tipos ROS
```

## Patrones de Desarrollo Específicos

### Real-time Data Handling
- Usar WebSockets para telemetría en tiempo real
- Implementar WebRTC para streaming de video
- Manejar reconexión automática
- Implementar buffering para datos de alta frecuencia

### ROS Integration
- Integrar con Foxglove Bridge
- Manejar mensajes ROS estándar
- Implementar visualización de datos ROS
- Manejar múltiples robots simultáneamente

### Video Streaming
- Usar WebRTC para video de baja latencia
- Implementar controles de video
- Manejar múltiples streams
- Implementar grabación de video

### Code Editor Integration
- Editor de código Python integrado
- Syntax highlighting
- Auto-completion
- Error detection
- Code validation

### Telemetry Visualization
- Gráficas en tiempo real
- Múltiples tipos de datos
- Exportación de datos
- Análisis histórico

## Tecnologías Específicas

### Core Stack
- **Next.js 14**: Framework React con App Router
- **TypeScript**: Tipado estático
- **Tailwind CSS**: Estilos utilitarios

### Real-time Communication
- **WebSockets**: Para telemetría y control
- **WebRTC**: Para streaming de video
- **Socket.io**: Para comunicación bidireccional

### Data Visualization
- **Chart.js**: Para gráficas de telemetría
- **D3.js**: Para visualizaciones avanzadas
- **Three.js**: Para visualización 3D (opcional)

### Code Editor
- **Monaco Editor**: Editor de código integrado
- **Python Language Server**: Para autocompletado
- **CodeMirror**: Alternativa ligera