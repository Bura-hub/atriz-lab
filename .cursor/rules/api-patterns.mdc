---
globs: backend/app/api/**/*.py
---

# API Development Patterns

## Endpoint Structure
Follow the established patterns in [backend/app/api/endpoints/](mdc:backend/app/api/endpoints/):

### GET Endpoints
- Use query parameters for filtering and pagination
- Implement proper HTTP status codes (200, 404, 500)
- Return consistent response formats
- Include total count for paginated results

### POST Endpoints
- Use Pydantic models for request validation
- Return created resource with 201 status
- Implement proper error handling
- Validate all required fields

### PUT/PATCH Endpoints
- Use Pydantic models for update validation
- Return updated resource
- Handle partial updates with PATCH
- Implement proper validation

## Response Format Standards
```python
# Success responses
{
    "data": {...},
    "message": "Success message",
    "status": "success"
}

# Error responses
{
    "error": "Error message",
    "status": "error",
    "code": "ERROR_CODE"
}

# Paginated responses
{
    "data": [...],
    "total": 100,
    "page": 1,
    "limit": 20
}
```

## Error Handling
- Use HTTPException for API errors
- Implement proper error logging
- Return meaningful error messages
- Use consistent error codes
- Handle validation errors gracefully

## Authentication & Authorization
- Implement JWT token authentication
- Use dependency injection for auth
- Implement role-based access control
- Secure sensitive endpoints
- Handle token expiration

## Rate Limiting
- Implement rate limiting for API endpoints
- Use Redis for rate limiting storage
- Configure different limits per endpoint
- Handle rate limit exceeded responses
- Monitor API usage patterns

## API Documentation
- Use FastAPI automatic documentation
- Include comprehensive docstrings
- Document all request/response models
- Provide example requests/responses
- Keep documentation up to date

## Testing Patterns
- Write unit tests for all endpoints
- Use pytest for testing framework
- Mock external dependencies
- Test error scenarios
- Implement integration tests