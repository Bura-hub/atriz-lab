---
alwaysApply: true
---

# Atriz Lab - Arquitectura CSR (Cliente-Servidor-Robot)

## Arquitectura General del Sistema
El Laboratorio Remoto Atriz se fundamenta en una arquitectura de tres capas:

### 1. **Cliente Web** (Frontend)
- **Tecnología**: React/Next.js con TypeScript
- **Funciones**: Interfaz de usuario para experimentos remotos
- **Comunicación**: REST API + WebSockets + WebRTC

### 2. **Servidor de Gestión** (Backend)
- **Tecnología**: FastAPI (Python asíncrono)
- **Funciones**: Orquestación central, seguridad, despliegue
- **Comunicación**: SSH con robots, WebSockets con clientes

### 3. **Robots Mercator** (Hardware)
- **Tecnología**: ROS Noetic en Raspberry Pi 4 + Ubuntu 20.04
- **Funciones**: Ejecución autónoma de experimentos
- **Comunicación**: WiFi + SSH con servidor

## Flujo de Datos del Sistema

### Flujo de Control (Cliente → Servidor → Robot)
1. **Cliente a Servidor**: Usuario sube script Python vía Frontend
2. **Servidor a Robot**: Despliegue seguro vía SSH/SCP al Raspberry Pi
3. **Ejecución**: Script ejecutado en entorno aislado (Docker + cgroups)

### Flujo de Telemetría (Robot → Servidor → Cliente)
1. **Robot a Servidor**: Datos ROS (20-30 Hz) vía Foxglove Bridge
2. **Servidor a Cliente**: WebSockets para telemetría + WebRTC para video

## Componentes Críticos del Sistema

### Sistema de Monitoreo (Tycho)
- **Función**: Seguimiento de trayectorias con cámaras cenitales
- **Tecnología**: ROS Noetic + filtros Kalman + marcadores ArUco
- **Integración**: Ejecutado en servidor central

### Seguridad y Aislamiento
- **Sandboxing**: Docker + cgroups + ulimit para código de usuario
- **SSH**: Autenticación por llaves, sin reenvío de agentes
- **ROS Namespaces**: Aislamiento lógico entre experimentos